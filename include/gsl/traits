///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2015 Microsoft Corporation. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef GSL_TRAITS_H
#define GSL_TRAITS_H

#include <type_traits> // for enable_if_t, is_convertible, is_assignable
#include <utility>

namespace gsl
{
namespace traits
{

    template <class...>
    using void_t = void;

    template <typename, typename = void_t<>>
    struct has_get_member : std::false_type
    {
    };

    template <class PtrType>
    struct has_get_member<
        PtrType,
        void_t<decltype(std::declval<PtrType>().get()),
               std::enable_if_t<std::is_same<decltype(std::declval<PtrType>().get()),
                                             std::add_pointer_t<typename std::pointer_traits<
                                                 PtrType>::element_type>>::value>>> : std::true_type
    {
    };
}
}
#endif // GSL_TRAITS_H
